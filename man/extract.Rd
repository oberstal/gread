% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract-features.R
\name{extract}
\alias{extract}
\alias{extract_feature}
\title{Extract features from gtf/gff objects}
\usage{
extract(x, feature = c("gene_exon", "gene", "gene_intron", "exon", "intron"),
  type = c("default", "union", "disjoin", "intersect", "longest", "shortest",
  "overlap"), ignore_strand = FALSE, transcript_id = "transcript_id",
  gene_id = "gene_id", ...)
}
\arguments{
\item{x}{Input object of class \code{gtf} or \code{gff} which inherits 
from \code{GRanges}.}

\item{feature}{A character vector of (usually related) features to extract 
from. One of \code{"gene_exon"}, \code{"gene"}, \code{"gene_intron"}, 
\code{"exon"}, \code{"intron"}. NB: \code{"exon"} feature must be present 
in \code{x}.}

\item{type}{\code{default} just extracts the features and returns it as 
such.

\code{union} merges all overlapping intervals into one. For e.g., with 
intervals \code{[a,b], [c,d], [e,f]} where \code{c < a < e < d < b < f}, 
the \code{union} is \code{[c, f]}. NB: There may be more than one row per 
\code{feature}.

 \code{intersect} returns only the intersecting part. Using the same 
intervals as before, the intersection is \code{[e,d]}. NB: If there is an 
intersection, exactly one row is returned, else the \code{feature} is 
skipped entirely (0-rows).
           
\code{disjoin} splits intervals into non-overlapping pieces. Using 
the same interval as before, the pieces would be \code{[c,a-1]} and 
\code{[b+1,f]}. NB: it could result in multiple rows for each a given 
\code{feature}.

\code{longest} retains only the longest interval.

\code{shortest} retains only the shortest interval.

\code{overlap} is a special case. Of the overlapping intervals, only 
the shortest interval is retained iff they all have identical \code{start}, 
\code{end}, or both. If not, all overlapping intervals are retained. For 
e.g., with intervals \code{[a,b], [c,d], [e,f]} where \code{a == c, b == f, 
d > b,f and e > a,c}, the interval \code{[e,f]} will be retained.}

\item{ignore_strand}{Logical argument to pass to \code{GRanges} function. 
Indicates whether \code{strand} should be ignored when constructing 
\code{GRanges} object or not. Default is \code{FALSE}.}

\item{transcript_id}{Column name in \code{x} corresponding to transcript 
id. Default value is \code{"transcript_id"}.}

\item{gene_id}{Column name in \code{x} corresponding to gene id. Default 
value is \code{"gene_id"}.}

\item{...}{Arguments passed to other functions. Ignored at the moment.}
}
\value{
An object of class \code{"gene"} when \code{feature} is 
\code{"gene"}, \code{"gene_exon"} or \code{"gene_intron"}, and of class 
\code{"exon"} and \code{"intron"} when \code{feature} is \code{"exon"} or 
\code{"intron"} respectively. They all inherit from \code{GRanges}.
}
\description{
Provides functions for further post processing on objects of 
class \code{gtf} and \code{gff}.
}
\details{
Extract features based on various criteria (usually intended for  
obtaining read counts using \code{gcount} for a given \code{bam} file.
}
\examples{
path <- system.file("tests", package="gread")
gtf_file <- file.path(path, "sample.gtf")
gtf <- read_format(gtf_file)
# extract exons, combine coordinates of overlapping exons
exons <- extract(gtf, feature="exon", type="union")
# extract all exons within the gene, but combine overlapping exons
exons <- extract(gtf, feature="gene_exon", type="union")
## extract gene span (uses exon coordinates if feature='gene' doesn't exist)
genes <- extract(gtf, feature="gene", type="default")
}
\seealso{
\code{\link{read_format}} \code{\link{as_granges}} 
\code{\link{extract}} \code{\link{construct_introns}}
}

